{"ast":null,"code":"var _jsxFileName = \"/Users/aqtruong/Desktop/pathfinding/algorithm-path-visualizer/src/components/Pathfind.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Astar from \"../astarAlgorithm/astar\";\nimport \"./Pathfind.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cols = '25';\nconst rows = '15';\nconst NODE_START_ROW = 0;\nconst NODE_START_COL = 0;\nconst NODE_END_ROW = rows - 1;\nconst NODE_END_COL = cols - 1;\n\nconst Pathfind = () => {\n  _s();\n\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  const [VisitedNodes, setVisitedNodes] = useState([]);\n  useEffect(() => {\n    initializeGrid();\n  }, []); //Creates the grid\n\n  const initializeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbors(grid);\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    let path = Astar(startNode, endNode);\n    setPath(path);\n  };\n\n  const createSpot = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  }; //Add neighbors\n\n\n  const addNeighbors = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j].addneighbors(grid);\n      }\n    }\n  }; //spot constructor\n\n\n  function Spot(i, j) {\n    this.x = i;\n    this.y = j;\n    this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n    this.g = 0;\n    this.f = 0;\n    this.h = 0;\n    this.neighbors = [];\n    this.previous = undefined;\n\n    this.addneighbors = function (grid) {\n      let i = this.x;\n      let j = this.y;\n      if (i > 0) this.neighbors.push(grid[i - 1][j]);\n      if (i < rows - 1) this.neighbors.push(grid[i + 1][j]);\n      if (j > 0) this.neighbors.push(grid[i][j - 1]);\n      if (j < cols - 1) this.neighbors.push(grid[i][j + 1]);\n    };\n  } //Grid with node\n\n\n  const gridWithNode = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Grid.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowWrapper\",\n        children: row.map((col, colIndex) => {\n          const {\n            isStart,\n            isEnd\n          } = col;\n          return /*#__PURE__*/_jsxDEV(Node, {\n            isStart: isStart,\n            isEnd: isEnd,\n            row: rowIndex,\n            col: colIndex\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 22\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  console.log(Path);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Pathfind Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), gridWithNode]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pathfind, \"ibVuIA7wj797G6a5uUFQMVyhKlE=\");\n\n_c = Pathfind;\nexport default Pathfind;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pathfind\");","map":{"version":3,"names":["React","useState","useEffect","Node","Astar","cols","rows","NODE_START_ROW","NODE_START_COL","NODE_END_ROW","NODE_END_COL","Pathfind","Grid","setGrid","Path","setPath","VisitedNodes","setVisitedNodes","initializeGrid","grid","Array","i","createSpot","addNeighbors","startNode","endNode","path","j","Spot","addneighbors","x","y","isStart","isEnd","g","f","h","neighbors","previous","undefined","push","gridWithNode","map","row","rowIndex","col","colIndex","console","log"],"sources":["/Users/aqtruong/Desktop/pathfinding/algorithm-path-visualizer/src/components/Pathfind.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Astar from \"../astarAlgorithm/astar\";\nimport \"./Pathfind.css\";\n\nconst cols = '25';\nconst rows = '15';\n\nconst NODE_START_ROW = 0;\nconst NODE_START_COL = 0;\nconst NODE_END_ROW = rows - 1;\nconst NODE_END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  const [VisitedNodes, setVisitedNodes] = useState([]);\n\n  useEffect(() => {\n    initializeGrid();\n  }, [])\n  //Creates the grid\n  const initializeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbors(grid);\n\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    let path = Astar(startNode,endNode);\n    setPath(path); \n\n  }\n\n  const createSpot = (grid) => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  }\n  //Add neighbors\n  const addNeighbors = (grid) => {\n    for(let i = 0; i < rows; i++){\n      for(let j = 0; j< cols; j++){\n        grid[i][j].addneighbors(grid);\n      }\n    }\n  }\n  //spot constructor\n  function Spot(i, j) {\n    this.x = i;\n    this.y = j;\n\n    this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n\n    this.g = 0;\n    this.f = 0;\n    this.h = 0; \n    this.neighbors = [];\n    this.previous = undefined;\n    this.addneighbors = function(grid){\n      let i = this.x;\n      let j = this.y;\n      if(i > 0) this.neighbors.push(grid[i-1][j]);\n      if(i < rows-1) this.neighbors.push(grid[i+1][j]);\n      if(j>0) this.neighbors.push(grid[i][j-1]);\n      if(j < cols-1) this.neighbors.push(grid[i][j+1]);\n    }\n\n  }\n\n\n  //Grid with node\n  const gridWithNode = (\n    <div>\n      {Grid.map((row, rowIndex) => {\n        return (\n          <div key={rowIndex} className=\"rowWrapper\">\n            {row.map((col, colIndex) => {\n              const { isStart, isEnd } = col;\n              return <Node key={colIndex} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} />;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  console.log(Path);\n  return (\n    <div className=\"Wrapper\">\n      <h1> Pathfind Component</h1>\n      {gridWithNode}\n    </div>\n  );\n};\n\nexport default Pathfind;"],"mappings":"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"},"metadata":{},"sourceType":"module"}