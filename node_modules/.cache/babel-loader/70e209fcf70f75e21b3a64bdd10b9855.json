{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"sources":["/Users/aqtruong/algorithm-path-visualizer/src/algorithms/dijkstra.js"],"sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue;\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}