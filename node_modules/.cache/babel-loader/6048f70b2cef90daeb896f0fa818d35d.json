{"ast":null,"code":"var _jsxFileName = \"/Users/aqtruong/Desktop/pathfinding/algorithm-path-visualizer/src/components/Pathfind.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Astar from \"../astarAlgorithm/astar\";\nimport \"./Pathfind.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cols = '40';\nconst rows = '10';\nconst NODE_START_ROW = 0;\nconst NODE_START_COL = 0;\nconst NODE_END_ROW = rows - 1;\nconst NODE_END_COL = cols - 1;\n\nconst Pathfind = () => {\n  _s();\n\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  const [VisitedNodes, setVisitedNodes] = useState([]); // useEffect(() => {\n  //   initializeGrid();\n  // }, [])\n  //Creates the grid\n\n  const initializeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbors(grid);\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    startNode.isWall = false;\n    endNode.isWall = false;\n    let path = Astar(startNode, endNode);\n    setPath(path.path);\n    setVisitedNodes(path.visitedNodes);\n  };\n\n  const createSpot = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  }; //Add neighbors\n\n\n  const addNeighbors = grid => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j].addneighbors(grid);\n      }\n    }\n  }; //spot constructor\n\n\n  function Spot(i, j) {\n    this.x = i;\n    this.y = j;\n    this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n    this.g = 0;\n    this.f = 0;\n    this.h = 0;\n    this.neighbors = [];\n    this.isWall = false;\n\n    if (Math.random(1) < 0.2) {\n      this.isWall = true;\n    }\n\n    this.previous = undefined;\n\n    this.addneighbors = function (grid) {\n      let i = this.x;\n      let j = this.y;\n      if (i > 0) this.neighbors.push(grid[i - 1][j]);\n      if (i < rows - 1) this.neighbors.push(grid[i + 1][j]);\n      if (j > 0) this.neighbors.push(grid[i][j - 1]);\n      if (j < cols - 1) this.neighbors.push(grid[i][j + 1]);\n    };\n  } //Grid with node\n\n\n  const gridWithNode = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Grid.map((row, rowIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowWrapper\",\n        children: row.map((col, colIndex) => {\n          const {\n            isStart,\n            isEnd,\n            isWall\n          } = col;\n          return /*#__PURE__*/_jsxDEV(Node, {\n            isStart: isStart,\n            isEnd: isEnd,\n            row: rowIndex,\n            col: colIndex,\n            isWall: isWall\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 22\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this); //visualizes the shortest path\n\n\n  const visualizeShortestPath = shortestPathNodes => {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathNodes[i];\n        document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-shortest-path\";\n      }, 10 * i);\n    }\n  }; //visualizes overall path\n\n\n  const visualizePath = () => {\n    for (let i = 0; i <= VisitedNodes.length; i++) {\n      if (i === VisitedNodes.length) {\n        setTimeout(() => {\n          visualizeShortestPath(Path);\n        }, 10 * i);\n      } else {\n        setTimeout(() => {\n          const node = VisitedNodes[i];\n          document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-visited\";\n        }, 10 * i);\n      }\n    }\n  };\n\n  const resetGrid = () => {\n    console.log(\"test\");\n    const boxes = document.querySelectorAll('.node-visited, .node-shortest-path, .isWall');\n    boxes.forEach(box => {\n      box.classList.remove('node-visited', 'node-shortest-path', ' isWall');\n    });\n    initializeGrid();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: visualizePath,\n      children: \" Visualize Path\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGrid,\n      children: \" Reset Grid \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initializeGrid,\n      children: \" Make Grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Pathfinding Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), gridWithNode]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pathfind, \"CfYv0N7L+t0DEGUYEWopuNN4A0Y=\");\n\n_c = Pathfind;\nexport default Pathfind;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pathfind\");","map":{"version":3,"names":["React","useState","useEffect","Node","Astar","cols","rows","NODE_START_ROW","NODE_START_COL","NODE_END_ROW","NODE_END_COL","Pathfind","Grid","setGrid","Path","setPath","VisitedNodes","setVisitedNodes","initializeGrid","grid","Array","i","createSpot","addNeighbors","startNode","endNode","isWall","path","visitedNodes","j","Spot","addneighbors","x","y","isStart","isEnd","g","f","h","neighbors","Math","random","previous","undefined","push","gridWithNode","map","row","rowIndex","col","colIndex","visualizeShortestPath","shortestPathNodes","length","setTimeout","node","document","getElementById","className","visualizePath","resetGrid","console","log","boxes","querySelectorAll","forEach","box","classList","remove"],"sources":["/Users/aqtruong/Desktop/pathfinding/algorithm-path-visualizer/src/components/Pathfind.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Node from \"./Node\";\nimport Astar from \"../astarAlgorithm/astar\";\nimport \"./Pathfind.css\";\n\nconst cols = '40';\nconst rows = '10';\n\nconst NODE_START_ROW = 0;\nconst NODE_START_COL = 0;\nconst NODE_END_ROW = rows - 1;\nconst NODE_END_COL = cols - 1;\n\nconst Pathfind = () => {\n  const [Grid, setGrid] = useState([]);\n  const [Path, setPath] = useState([]);\n  const [VisitedNodes, setVisitedNodes] = useState([]);\n  \n  // useEffect(() => {\n  //   initializeGrid();\n  // }, [])\n  //Creates the grid\n  const initializeGrid = () => {\n    const grid = new Array(rows);\n\n    for (let i = 0; i < rows; i++) {\n      grid[i] = new Array(cols);\n    }\n    createSpot(grid);\n    setGrid(grid);\n    addNeighbors(grid);\n\n    const startNode = grid[NODE_START_ROW][NODE_START_COL];\n    const endNode = grid[NODE_END_ROW][NODE_END_COL];\n    startNode.isWall = false;\n    endNode.isWall = false;\n    let path = Astar(startNode, endNode);\n    setPath(path.path);\n    setVisitedNodes(path.visitedNodes);\n  }\n\n  const createSpot = (grid) => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j] = new Spot(i, j);\n      }\n    }\n  }\n  //Add neighbors\n  const addNeighbors = (grid) => {\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        grid[i][j].addneighbors(grid);\n      }\n    }\n  }\n  //spot constructor\n  function Spot(i, j) {\n    this.x = i;\n    this.y = j;\n\n    this.isStart = this.x === NODE_START_ROW && this.y === NODE_START_COL;\n    this.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n\n    this.g = 0;\n    this.f = 0;\n    this.h = 0;\n    this.neighbors = [];\n    this.isWall = false;\n    if (Math.random(1) < 0.2) {\n      this.isWall = true;\n    }\n    this.previous = undefined;\n    this.addneighbors = function (grid) {\n      let i = this.x;\n      let j = this.y;\n      if (i > 0) this.neighbors.push(grid[i - 1][j]);\n      if (i < rows - 1) this.neighbors.push(grid[i + 1][j]);\n      if (j > 0) this.neighbors.push(grid[i][j - 1]);\n      if (j < cols - 1) this.neighbors.push(grid[i][j + 1]);\n    }\n\n  }\n\n\n  //Grid with node\n  const gridWithNode = (\n    <div>\n      {Grid.map((row, rowIndex) => {\n        return (\n          <div key={rowIndex} className=\"rowWrapper\">\n            {row.map((col, colIndex) => {\n              const { isStart, isEnd, isWall } = col;\n              return <Node key={colIndex} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} isWall={isWall} />;\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n  //visualizes the shortest path\n  const visualizeShortestPath = (shortestPathNodes) => {\n    for (let i = 0; i < shortestPathNodes.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathNodes[i];\n        document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-shortest-path\";\n      }, 10 * i)\n    }\n  }\n  //visualizes overall path\n  const visualizePath = () => {\n    for (let i = 0; i <= VisitedNodes.length; i++) {\n      if (i === VisitedNodes.length) {\n        setTimeout(() => {\n          visualizeShortestPath(Path);\n        }, 10 * i);\n      } else {\n        setTimeout(() => {\n          const node = VisitedNodes[i];\n          document.getElementById(`node-${node.x}-${node.y}`).className = \"node node-visited\";\n        }, 10 * i);\n      }\n    }\n  }\n  const resetGrid = () => {\n    console.log(\"test\");\n    const boxes = document.querySelectorAll('.node-visited, .node-shortest-path, .isWall');\n    boxes.forEach(box => {\n      box.classList.remove('node-visited', 'node-shortest-path', ' isWall')\n    }); \n    initializeGrid();\n  }\n\n  return (\n    <div className=\"Wrapper\">\n      <button onClick={visualizePath}> Visualize Path</button>\n      <button onClick={resetGrid}> Reset Grid </button>\n      <button onClick={initializeGrid}> Make Grid</button>\n      <h1> Pathfinding Visualizer</h1>\n      {gridWithNode}\n    </div>\n  );\n};\n\nexport default Pathfind;"],"mappings":"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"},"metadata":{},"sourceType":"module"}