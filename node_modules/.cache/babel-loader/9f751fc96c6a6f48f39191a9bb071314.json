{"ast":null,"code":"function Astar(startNode, endNode) {\n  let openSet = [];\n  let closedSet = [];\n  let path = [];\n  openSet.push(startNode); //gets the index with the lowest f value\n\n  while (openSet.length > 0) {\n    let leastIndex = 0;\n\n    for (let i = 0; i < openSet.length; i++) {\n      if (openSet[i].f < openSet[leastIndex].f) {\n        leastIndex = i;\n      }\n    }\n  }\n\n  let current = openSet[leastIndex];\n\n  if (current === endNode) {\n    console.log(\"Done! Path found!\");\n  }\n\n  openSet = openSet.filter(elt => elt !== current);\n  closedSet.push(curernt);\n  let neighbors = current.neighbors;\n\n  for (let i = 0; i < neighbors.length; i++) {\n    let neighbor = neighbors[i];\n\n    if (!closedSet.includes(neighbor)) {\n      let tempG = current.g + 1;\n      let newPath = false;\n\n      if (openSet.includes(neighbor)) {\n        if (tempG < neighbor.g) {\n          neighbor.g = tempG;\n          newPath = true;\n        }\n      } else {\n        neighbor.g = tempG;\n        newPath = true;\n        openSet.push(neighbor);\n      }\n\n      if (newPath) {\n        neighbor.h = heuristic(neighbor, endNode);\n        neighbor.f = neighbor.h + neighbor.g;\n        neighbor.previous = current;\n      }\n    }\n  }\n}\n\n_c = Astar;\n\nfunction heuristic(a, b) {\n  let d = Math.abs(a.x - a.y) + Math.abs(b.x - b.y);\n  return d;\n}\n\nexport default Astar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Astar\");","map":{"version":3,"names":["Astar","startNode","endNode","openSet","closedSet","path","push","length","leastIndex","i","f","current","console","log","filter","elt","curernt","neighbors","neighbor","includes","tempG","g","newPath","h","heuristic","previous","a","b","d","Math","abs","x","y"],"sources":["/Users/aqtruong/Desktop/pathfinding/algorithm-path-visualizer/src/astarAlgorithm/astar.js"],"sourcesContent":["function Astar(startNode, endNode){\n    let openSet = [];\n    let closedSet = [];\n    let path = [];\n\n    openSet.push(startNode);\n    //gets the index with the lowest f value\n    while(openSet.length > 0){\n        let leastIndex = 0;\n        for(let i = 0; i <openSet.length; i++){\n            if(openSet[i].f < openSet[leastIndex].f){\n                leastIndex = i;\n            }\n        }\n    }\n\n    let current = openSet[leastIndex];\n    if(current === endNode){\n        console.log(\"Done! Path found!\");\n    }\n\n    openSet = openSet.filter((elt) => elt !== current);\n    closedSet.push(curernt);\n\n    let neighbors = current.neighbors;\n    for(let i = 0; i < neighbors.length; i ++){\n        let neighbor = neighbors[i];\n        if(!closedSet.includes(neighbor)){\n            let tempG = current.g+1;\n            let newPath = false; \n            if(openSet.includes(neighbor)){\n                if(tempG < neighbor.g){\n                    neighbor.g = tempG;\n                    newPath = true;\n                }\n            }else{\n                neighbor.g = tempG;\n                newPath = true;\n                openSet.push(neighbor);\n            }\n\n            if(newPath){\n                neighbor.h = heuristic(neighbor,endNode);\n                neighbor.f = neighbor.h + neighbor.g;\n                neighbor.previous = current;\n\n            }\n        }\n    }\n}\n\nfunction heuristic(a,b){\n    let d = Math.abs(a.x-a.y) + Math.abs(b.x-b.y);\n    return d;\n}\n\nexport default Astar;"],"mappings":"AAAA,SAASA,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,EAAkC;EAC9B,IAAIC,OAAO,GAAG,EAAd;EACA,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIC,IAAI,GAAG,EAAX;EAEAF,OAAO,CAACG,IAAR,CAAaL,SAAb,EAL8B,CAM9B;;EACA,OAAME,OAAO,CAACI,MAAR,GAAiB,CAAvB,EAAyB;IACrB,IAAIC,UAAU,GAAG,CAAjB;;IACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEN,OAAO,CAACI,MAA1B,EAAkCE,CAAC,EAAnC,EAAsC;MAClC,IAAGN,OAAO,CAACM,CAAD,CAAP,CAAWC,CAAX,GAAeP,OAAO,CAACK,UAAD,CAAP,CAAoBE,CAAtC,EAAwC;QACpCF,UAAU,GAAGC,CAAb;MACH;IACJ;EACJ;;EAED,IAAIE,OAAO,GAAGR,OAAO,CAACK,UAAD,CAArB;;EACA,IAAGG,OAAO,KAAKT,OAAf,EAAuB;IACnBU,OAAO,CAACC,GAAR,CAAY,mBAAZ;EACH;;EAEDV,OAAO,GAAGA,OAAO,CAACW,MAAR,CAAgBC,GAAD,IAASA,GAAG,KAAKJ,OAAhC,CAAV;EACAP,SAAS,CAACE,IAAV,CAAeU,OAAf;EAEA,IAAIC,SAAS,GAAGN,OAAO,CAACM,SAAxB;;EACA,KAAI,IAAIR,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGQ,SAAS,CAACV,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;IACtC,IAAIS,QAAQ,GAAGD,SAAS,CAACR,CAAD,CAAxB;;IACA,IAAG,CAACL,SAAS,CAACe,QAAV,CAAmBD,QAAnB,CAAJ,EAAiC;MAC7B,IAAIE,KAAK,GAAGT,OAAO,CAACU,CAAR,GAAU,CAAtB;MACA,IAAIC,OAAO,GAAG,KAAd;;MACA,IAAGnB,OAAO,CAACgB,QAAR,CAAiBD,QAAjB,CAAH,EAA8B;QAC1B,IAAGE,KAAK,GAAGF,QAAQ,CAACG,CAApB,EAAsB;UAClBH,QAAQ,CAACG,CAAT,GAAaD,KAAb;UACAE,OAAO,GAAG,IAAV;QACH;MACJ,CALD,MAKK;QACDJ,QAAQ,CAACG,CAAT,GAAaD,KAAb;QACAE,OAAO,GAAG,IAAV;QACAnB,OAAO,CAACG,IAAR,CAAaY,QAAb;MACH;;MAED,IAAGI,OAAH,EAAW;QACPJ,QAAQ,CAACK,CAAT,GAAaC,SAAS,CAACN,QAAD,EAAUhB,OAAV,CAAtB;QACAgB,QAAQ,CAACR,CAAT,GAAaQ,QAAQ,CAACK,CAAT,GAAaL,QAAQ,CAACG,CAAnC;QACAH,QAAQ,CAACO,QAAT,GAAoBd,OAApB;MAEH;IACJ;EACJ;AACJ;;KAjDQX,K;;AAmDT,SAASwB,SAAT,CAAmBE,CAAnB,EAAqBC,CAArB,EAAuB;EACnB,IAAIC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,CAAC,CAACK,CAAF,GAAIL,CAAC,CAACM,CAAf,IAAoBH,IAAI,CAACC,GAAL,CAASH,CAAC,CAACI,CAAF,GAAIJ,CAAC,CAACK,CAAf,CAA5B;EACA,OAAOJ,CAAP;AACH;;AAED,eAAe5B,KAAf"},"metadata":{},"sourceType":"module"}